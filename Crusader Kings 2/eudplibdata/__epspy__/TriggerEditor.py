## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *
from eudplib.core.eudfunc import EUDTraceLog, EUDTracedFunc, EUDTracedTypedFunc, EUDTracedMethod, EUDTracedTypedMethod
from eudplib.epscript.helper import _RELIMP, _TYGV, _TYSV, _TYLV, _CGFW, _ARR, _VARR, _SRET, _SV, _ATTW, _ARRW, _ATTC, _ARRC, _L2V, _LSH, _ALL
# (Line 1) import BGMPlayer as BGM;
import BGMPlayer as BGM
# (Line 2) import tempcustomText as tct;
import tempcustomText as tct
# (Line 4) var txtPtr, btnPtr, btnPos, oldCP;
txtPtr, btnPtr, btnPos, oldCP = EUDCreateVariables(4)
# (Line 5) const trgk = $T('Artanis & safhfh');
trgk = _CGFW(lambda: [GetStringIndex('Artanis & safhfh')], 1)[0]
# (Line 9) function BuildReset(unitPTR);
# (Line 10) function BuildResetEPD(unitEPD);
# (Line 11) function BuildCheck(unitPTR, Unit);
# (Line 12) function BuildCheckEPD(unitEPD, unit);
# (Line 13) function BuildReset(unitPTR) {
@EUDFunc
def BuildReset(unitPTR):
    # (Line 25) BuildResetEPD(EPD(unitPTR));
    BuildResetEPD(EPD(unitPTR))
    # (Line 26) }
    # (Line 27) function BuildResetEPD(unitEPD) {

@EUDFunc
def BuildResetEPD(unitEPD):
    # (Line 39) VProc(unitEPD, list(
    # (Line 40) unitEPD.AddNumber(0x98/4),
    # (Line 41) unitEPD.SetDest(EPD(0x6509B0)),
    # (Line 42) ));
    VProc(unitEPD, FlattenList([unitEPD.AddNumber(0x98 // 4), unitEPD.SetDest(EPD(0x6509B0))]))
    # (Line 43) setcurpl2cpcache(actions=list(
    # (Line 44) SetDeaths(CurrentPlayer, SetTo, 0xE400E4, 0),
    # (Line 45) SetMemory(0x6509B0, Add, 1),
    # (Line 46) SetDeaths(CurrentPlayer, SetTo, 0xE400E4, 0),
    # (Line 47) SetMemory(0x6509B0, Add, 1),
    # (Line 48) SetDeathsX(CurrentPlayer, SetTo, 228, 0, 0xFFFF),
    # (Line 49) SetMemory(0x6509B0, Add, 1),
    # (Line 50) SetDeathsX(CurrentPlayer, SetTo, 2 << 16, 0, 0xFFFF0000),
    # (Line 51) ));
    f_setcurpl2cpcache(actions=FlattenList([SetDeaths(CurrentPlayer, SetTo, 0xE400E4, 0), SetMemory(0x6509B0, Add, 1), SetDeaths(CurrentPlayer, SetTo, 0xE400E4, 0), SetMemory(0x6509B0, Add, 1), SetDeathsX(CurrentPlayer, SetTo, 228, 0, 0xFFFF), SetMemory(0x6509B0, Add, 1), SetDeathsX(CurrentPlayer, SetTo, _LSH(2,16), 0, 0xFFFF0000)]))
    # (Line 52) }
    # (Line 53) function BuildCheck(unitPTR ,Unit) {

@EUDFunc
def BuildCheck(unitPTR, Unit):
    # (Line 69) BuildCheckEPD(EPD(unitPTR),Unit);
    BuildCheckEPD(EPD(unitPTR), Unit)
    # (Line 70) }
    # (Line 71) function BuildCheckEPD(unitEPD ,unit) {

@EUDFunc
def BuildCheckEPD(unitEPD, unit):
    # (Line 87) unitEPD += 0x98 / 4;  // buildQueue
    unitEPD.__iadd__(0x98 // 4)
    # (Line 88) const checkUnit = Forward();
    checkUnit = Forward()
    # (Line 89) if (MemoryEPD(unitEPD, Exactly, 0xE400E4)) {
    if EUDIf()(MemoryEPD(unitEPD, Exactly, 0xE400E4)):
        # (Line 90) unitEPD += 1;
        unitEPD.__iadd__(1)
        # (Line 91) if (MemoryEPD(unitEPD, Exactly, 0xE400E4)) {
        if EUDIf()(MemoryEPD(unitEPD, Exactly, 0xE400E4)):
            # (Line 92) unitEPD += 1;
            unitEPD.__iadd__(1)
            # (Line 93) if (MemoryXEPD(unitEPD, Exactly, 0xE4, 0xFFFF)) return False;
            if EUDIf()(MemoryXEPD(unitEPD, Exactly, 0xE4, 0xFFFF)):
                EUDReturn(False)
                # (Line 94) unitEPD -= 2;
            EUDEndIf()
            unitEPD.__isub__(2)
            # (Line 95) SetNextTrigger(checkUnit);
            SetNextTrigger(checkUnit)
            # (Line 96) }
            # (Line 97) unitEPD -= 1;
        EUDEndIf()
        unitEPD.__isub__(1)
        # (Line 98) }
        # (Line 99) checkUnit.__lshift__(NextTrigger());
    EUDEndIf()
    checkUnit.__lshift__(NextTrigger())
    # (Line 100) if (MemoryXEPD(unitEPD, Exactly, unit, 0xFFFF)) {
    if EUDIf()(MemoryXEPD(unitEPD, Exactly, unit, 0xFFFF)):
        # (Line 101) return True;
        EUDReturn(True)
        # (Line 102) } else {
    if EUDElse()():
        # (Line 103) const mulUnit = unit * 65536;
        mulUnit = unit * 65536
        # (Line 104) if (MemoryXEPD(unitEPD, Exactly, mulUnit, 0xFFFF0000)) {
        if EUDIf()(MemoryXEPD(unitEPD, Exactly, mulUnit, 0xFFFF0000)):
            # (Line 105) return True;
            EUDReturn(True)
            # (Line 106) } else {
        if EUDElse()():
            # (Line 107) unitEPD += 1;
            unitEPD.__iadd__(1)
            # (Line 108) if (MemoryXEPD(unitEPD, Exactly, unit, 0xFFFF)) {
            if EUDIf()(MemoryXEPD(unitEPD, Exactly, unit, 0xFFFF)):
                # (Line 109) return True;
                EUDReturn(True)
                # (Line 110) } else if (MemoryXEPD(unitEPD, Exactly, mulUnit, 0xFFFF0000)) {
            if EUDElseIf()(MemoryXEPD(unitEPD, Exactly, mulUnit, 0xFFFF0000)):
                # (Line 111) return True;
                EUDReturn(True)
                # (Line 112) } else {
            if EUDElse()():
                # (Line 113) unitEPD += 1;
                unitEPD.__iadd__(1)
                # (Line 114) if (MemoryXEPD(unitEPD, Exactly, unit, 0xFFFF)) {
                if EUDIf()(MemoryXEPD(unitEPD, Exactly, unit, 0xFFFF)):
                    # (Line 115) return True;
                    EUDReturn(True)
                    # (Line 116) }
                    # (Line 117) }
                EUDEndIf()
                # (Line 118) }
            EUDEndIf()
            # (Line 119) }
        EUDEndIf()
        # (Line 120) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 121) }
    # (Line 123) const ClassicTriggerExecTimer0 = EUDArray(8);

ClassicTriggerExecTimer0 = _CGFW(lambda: [EUDArray(8)], 1)[0]
# (Line 124) function ClassicTriggerExec0() {
@EUDFunc
def ClassicTriggerExec0():
    # (Line 125) if (ClassicTriggerExecTimer0[getcurpl()] == 1) {
    if EUDIf()(_ARRC(ClassicTriggerExecTimer0, f_getcurpl()) == 1):
        # (Line 126) BGM.Play((17), (0), (1));
        BGM.Play((17), (0), (1))
        # (Line 127) }
        # (Line 128) if (ClassicTriggerExecTimer0[getcurpl()] > 0) {
    EUDEndIf()
    if EUDIf()(_ARRC(ClassicTriggerExecTimer0, f_getcurpl()) <= 0, neg=True):
        # (Line 129) ClassicTriggerExecTimer0[getcurpl()] += 1;
        _ARRW(ClassicTriggerExecTimer0, f_getcurpl()).__iadd__(1)
        # (Line 130) }
        # (Line 132) }
    EUDEndIf()
    # (Line 133) const ClassicTriggerExecTimer1 = EUDArray(8);

ClassicTriggerExecTimer1 = _CGFW(lambda: [EUDArray(8)], 1)[0]
# (Line 134) function ClassicTriggerExec1() {
@EUDFunc
def ClassicTriggerExec1():
    # (Line 135) if (ClassicTriggerExecTimer1[getcurpl()] == 1) {
    if EUDIf()(_ARRC(ClassicTriggerExecTimer1, f_getcurpl()) == 1):
        # (Line 136) SetMemory(0x6509A0, SetTo, 0);
        # (Line 137) PreserveTrigger();
        DoActions(SetMemory(0x6509A0, SetTo, 0))
        # (Line 138) ClassicTriggerExecTimer1[getcurpl()] = 0;
        DoActions(PreserveTrigger())
        _ARRW(ClassicTriggerExecTimer1, f_getcurpl()) << (0)
        # (Line 139) }
        # (Line 140) if (ClassicTriggerExecTimer1[getcurpl()] > 0) {
    EUDEndIf()
    if EUDIf()(_ARRC(ClassicTriggerExecTimer1, f_getcurpl()) <= 0, neg=True):
        # (Line 141) ClassicTriggerExecTimer1[getcurpl()] += 1;
        _ARRW(ClassicTriggerExecTimer1, f_getcurpl()).__iadd__(1)
        # (Line 142) }
        # (Line 144) }
    EUDEndIf()
    # (Line 145) const ClassicTriggerExecTimer2 = EUDArray(8);

ClassicTriggerExecTimer2 = _CGFW(lambda: [EUDArray(8)], 1)[0]
# (Line 146) function ClassicTriggerExec2() {
@EUDFunc
def ClassicTriggerExec2():
    # (Line 147) if (ClassicTriggerExecTimer2[getcurpl()] == 1) {
    if EUDIf()(_ARRC(ClassicTriggerExecTimer2, f_getcurpl()) == 1):
        # (Line 148) tct.chatAnnouncement("\x11Raised Army: \x01", dwread_epd(194 * 12 + 0), "");
        tct.f_chatAnnouncement("\x11Raised Army: \x01", f_dwread_epd(194 * 12 + 0), "")
        # (Line 149) PreserveTrigger();
        # (Line 150) ClassicTriggerExecTimer2[getcurpl()] = 0;
        DoActions(PreserveTrigger())
        _ARRW(ClassicTriggerExecTimer2, f_getcurpl()) << (0)
        # (Line 151) }
        # (Line 152) if (ClassicTriggerExecTimer2[getcurpl()] > 0) {
    EUDEndIf()
    if EUDIf()(_ARRC(ClassicTriggerExecTimer2, f_getcurpl()) <= 0, neg=True):
        # (Line 153) ClassicTriggerExecTimer2[getcurpl()] += 1;
        _ARRW(ClassicTriggerExecTimer2, f_getcurpl()).__iadd__(1)
        # (Line 154) }
        # (Line 156) }
    EUDEndIf()
    # (Line 157) const ClassicTriggerExecTimer3 = EUDArray(8);

ClassicTriggerExecTimer3 = _CGFW(lambda: [EUDArray(8)], 1)[0]
# (Line 158) function ClassicTriggerExec3() {
@EUDFunc
def ClassicTriggerExec3():
    # (Line 159) if (ClassicTriggerExecTimer3[getcurpl()] == 1) {
    if EUDIf()(_ARRC(ClassicTriggerExecTimer3, f_getcurpl()) == 1):
        # (Line 160) tct.chatAnnouncement("\x11Manpower: \x01", dwread_epd(176 * 12 + getcurpl()), "");
        tct.f_chatAnnouncement("\x11Manpower: \x01", f_dwread_epd(176 * 12 + f_getcurpl()), "")
        # (Line 161) PreserveTrigger();
        # (Line 162) ClassicTriggerExecTimer3[getcurpl()] = 0;
        DoActions(PreserveTrigger())
        _ARRW(ClassicTriggerExecTimer3, f_getcurpl()) << (0)
        # (Line 163) }
        # (Line 164) if (ClassicTriggerExecTimer3[getcurpl()] > 0) {
    EUDEndIf()
    if EUDIf()(_ARRC(ClassicTriggerExecTimer3, f_getcurpl()) <= 0, neg=True):
        # (Line 165) ClassicTriggerExecTimer3[getcurpl()] += 1;
        _ARRW(ClassicTriggerExecTimer3, f_getcurpl()).__iadd__(1)
        # (Line 166) }
        # (Line 168) }
    EUDEndIf()
    # (Line 169) const ClassicTriggerExecTimer4 = EUDArray(8);

ClassicTriggerExecTimer4 = _CGFW(lambda: [EUDArray(8)], 1)[0]
# (Line 170) function ClassicTriggerExec4() {
@EUDFunc
def ClassicTriggerExec4():
    # (Line 171) if (ClassicTriggerExecTimer4[getcurpl()] == 1) {
    if EUDIf()(_ARRC(ClassicTriggerExecTimer4, f_getcurpl()) == 1):
        # (Line 172) tct.chatAnnouncement("\x11Religion: \x01Catholicism");
        tct.f_chatAnnouncement("\x11Religion: \x01Catholicism")
        # (Line 173) PreserveTrigger();
        # (Line 174) ClassicTriggerExecTimer4[getcurpl()] = 0;
        DoActions(PreserveTrigger())
        _ARRW(ClassicTriggerExecTimer4, f_getcurpl()) << (0)
        # (Line 175) }
        # (Line 176) if (ClassicTriggerExecTimer4[getcurpl()] > 0) {
    EUDEndIf()
    if EUDIf()(_ARRC(ClassicTriggerExecTimer4, f_getcurpl()) <= 0, neg=True):
        # (Line 177) ClassicTriggerExecTimer4[getcurpl()] += 1;
        _ARRW(ClassicTriggerExecTimer4, f_getcurpl()).__iadd__(1)
        # (Line 178) }
        # (Line 180) }
    EUDEndIf()
    # (Line 181) const ClassicTriggerExecTimer5 = EUDArray(8);

ClassicTriggerExecTimer5 = _CGFW(lambda: [EUDArray(8)], 1)[0]
# (Line 182) function ClassicTriggerExec5() {
@EUDFunc
def ClassicTriggerExec5():
    # (Line 183) if (ClassicTriggerExecTimer5[getcurpl()] == 1) {
    if EUDIf()(_ARRC(ClassicTriggerExecTimer5, f_getcurpl()) == 1):
        # (Line 184) tct.chatAnnouncement("\x11Religion: \x1DSunni Islam");
        tct.f_chatAnnouncement("\x11Religion: \x1DSunni Islam")
        # (Line 185) PreserveTrigger();
        # (Line 186) ClassicTriggerExecTimer5[getcurpl()] = 0;
        DoActions(PreserveTrigger())
        _ARRW(ClassicTriggerExecTimer5, f_getcurpl()) << (0)
        # (Line 187) }
        # (Line 188) if (ClassicTriggerExecTimer5[getcurpl()] > 0) {
    EUDEndIf()
    if EUDIf()(_ARRC(ClassicTriggerExecTimer5, f_getcurpl()) <= 0, neg=True):
        # (Line 189) ClassicTriggerExecTimer5[getcurpl()] += 1;
        _ARRW(ClassicTriggerExecTimer5, f_getcurpl()).__iadd__(1)
        # (Line 190) }
        # (Line 192) }
    EUDEndIf()
    # (Line 193) function ClassicTriggerStarter0() {

@EUDFunc
def ClassicTriggerStarter0():
    # (Line 194) if (
    _t1 = EUDIf()
    # (Line 195) Always()
    # (Line 196) ) {
    if _t1(Always()):
        # (Line 197) if (ClassicTriggerExecTimer0[getcurpl()] == 0) {
        if EUDIf()(_ARRC(ClassicTriggerExecTimer0, f_getcurpl()) == 0):
            # (Line 198) ClassicTriggerExecTimer0[getcurpl()] = 1;
            _ARRW(ClassicTriggerExecTimer0, f_getcurpl()) << (1)
            # (Line 199) ClassicTriggerExec0();
            ClassicTriggerExec0()
            # (Line 200) }
            # (Line 201) }
        EUDEndIf()
        # (Line 202) }
    EUDEndIf()
    # (Line 203) function ClassicTriggerStarter1() {

@EUDFunc
def ClassicTriggerStarter1():
    # (Line 204) if (
    _t1 = EUDIf()
    # (Line 205) Always()
    # (Line 206) ) {
    if _t1(Always()):
        # (Line 207) if (ClassicTriggerExecTimer1[getcurpl()] == 0) {
        if EUDIf()(_ARRC(ClassicTriggerExecTimer1, f_getcurpl()) == 0):
            # (Line 208) ClassicTriggerExecTimer1[getcurpl()] = 1;
            _ARRW(ClassicTriggerExecTimer1, f_getcurpl()) << (1)
            # (Line 209) ClassicTriggerExec1();
            ClassicTriggerExec1()
            # (Line 210) }
            # (Line 211) }
        EUDEndIf()
        # (Line 212) }
    EUDEndIf()
    # (Line 213) function ClassicTriggerStarter2() {

@EUDFunc
def ClassicTriggerStarter2():
    # (Line 214) if (
    _t1 = EUDIf()
    # (Line 215) Deaths((13), (10), 1, (214))
    # (Line 216) ) {
    if _t1(Deaths((13), (10), 1, (214))):
        # (Line 217) if (ClassicTriggerExecTimer2[getcurpl()] == 0) {
        if EUDIf()(_ARRC(ClassicTriggerExecTimer2, f_getcurpl()) == 0):
            # (Line 218) ClassicTriggerExecTimer2[getcurpl()] = 1;
            _ARRW(ClassicTriggerExecTimer2, f_getcurpl()) << (1)
            # (Line 219) ClassicTriggerExec2();
            ClassicTriggerExec2()
            # (Line 220) }
            # (Line 221) }
        EUDEndIf()
        # (Line 222) }
    EUDEndIf()
    # (Line 223) function ClassicTriggerStarter3() {

@EUDFunc
def ClassicTriggerStarter3():
    # (Line 224) if (
    _t1 = EUDIf()
    # (Line 225) Deaths((13), (10), 2, (214))
    # (Line 226) ) {
    if _t1(Deaths((13), (10), 2, (214))):
        # (Line 227) if (ClassicTriggerExecTimer3[getcurpl()] == 0) {
        if EUDIf()(_ARRC(ClassicTriggerExecTimer3, f_getcurpl()) == 0):
            # (Line 228) ClassicTriggerExecTimer3[getcurpl()] = 1;
            _ARRW(ClassicTriggerExecTimer3, f_getcurpl()) << (1)
            # (Line 229) ClassicTriggerExec3();
            ClassicTriggerExec3()
            # (Line 230) }
            # (Line 231) }
        EUDEndIf()
        # (Line 232) }
    EUDEndIf()
    # (Line 233) function ClassicTriggerStarter4() {

@EUDFunc
def ClassicTriggerStarter4():
    # (Line 234) if (
    _t1 = EUDIf()
    # (Line 235) Deaths((13), (10), 3, (214)) &&
    # (Line 236) Deaths((13), (10), 3, (193))
    # (Line 237) ) {
    if _t1(EUDSCAnd()(Deaths((13), (10), 3, (214)))(Deaths((13), (10), 3, (193)))()):
        # (Line 238) if (ClassicTriggerExecTimer4[getcurpl()] == 0) {
        if EUDIf()(_ARRC(ClassicTriggerExecTimer4, f_getcurpl()) == 0):
            # (Line 239) ClassicTriggerExecTimer4[getcurpl()] = 1;
            _ARRW(ClassicTriggerExecTimer4, f_getcurpl()) << (1)
            # (Line 240) ClassicTriggerExec4();
            ClassicTriggerExec4()
            # (Line 241) }
            # (Line 242) }
        EUDEndIf()
        # (Line 243) }
    EUDEndIf()
    # (Line 244) function ClassicTriggerStarter5() {

@EUDFunc
def ClassicTriggerStarter5():
    # (Line 245) if (
    _t1 = EUDIf()
    # (Line 246) Deaths((13), (10), 3, (214)) &&
    # (Line 247) Deaths((13), (10), 1, (193))
    # (Line 248) ) {
    if _t1(EUDSCAnd()(Deaths((13), (10), 3, (214)))(Deaths((13), (10), 1, (193)))()):
        # (Line 249) if (ClassicTriggerExecTimer5[getcurpl()] == 0) {
        if EUDIf()(_ARRC(ClassicTriggerExecTimer5, f_getcurpl()) == 0):
            # (Line 250) ClassicTriggerExecTimer5[getcurpl()] = 1;
            _ARRW(ClassicTriggerExecTimer5, f_getcurpl()) << (1)
            # (Line 251) ClassicTriggerExec5();
            ClassicTriggerExec5()
            # (Line 252) }
            # (Line 253) }
        EUDEndIf()
        # (Line 254) }
    EUDEndIf()
    # (Line 255) function ClassicTriggerExec() {

@EUDFunc
def ClassicTriggerExec():
    # (Line 256) ClassicTriggerExec0();
    ClassicTriggerExec0()
    # (Line 257) ClassicTriggerExec1();
    ClassicTriggerExec1()
    # (Line 258) ClassicTriggerExec2();
    ClassicTriggerExec2()
    # (Line 259) ClassicTriggerExec3();
    ClassicTriggerExec3()
    # (Line 260) ClassicTriggerExec4();
    ClassicTriggerExec4()
    # (Line 261) ClassicTriggerExec5();
    ClassicTriggerExec5()
    # (Line 262) }
    # (Line 263) function ClassicTriggerStarter() {

@EUDFunc
def ClassicTriggerStarter():
    # (Line 264) if (playerexist(P1)) {
    if EUDIf()(f_playerexist(P1)):
        # (Line 265) setcurpl(P1);
        f_setcurpl(P1)
        # (Line 266) ClassicTriggerStarter0();
        ClassicTriggerStarter0()
        # (Line 267) ClassicTriggerStarter2();
        ClassicTriggerStarter2()
        # (Line 268) ClassicTriggerStarter3();
        ClassicTriggerStarter3()
        # (Line 269) ClassicTriggerStarter4();
        ClassicTriggerStarter4()
        # (Line 270) ClassicTriggerStarter5();
        ClassicTriggerStarter5()
        # (Line 271) }
        # (Line 272) if (playerexist(P2)) {
    EUDEndIf()
    if EUDIf()(f_playerexist(P2)):
        # (Line 273) setcurpl(P2);
        f_setcurpl(P2)
        # (Line 274) ClassicTriggerStarter0();
        ClassicTriggerStarter0()
        # (Line 275) ClassicTriggerStarter2();
        ClassicTriggerStarter2()
        # (Line 276) ClassicTriggerStarter3();
        ClassicTriggerStarter3()
        # (Line 277) ClassicTriggerStarter4();
        ClassicTriggerStarter4()
        # (Line 278) ClassicTriggerStarter5();
        ClassicTriggerStarter5()
        # (Line 279) }
        # (Line 280) if (playerexist(P3)) {
    EUDEndIf()
    if EUDIf()(f_playerexist(P3)):
        # (Line 281) setcurpl(P3);
        f_setcurpl(P3)
        # (Line 282) ClassicTriggerStarter0();
        ClassicTriggerStarter0()
        # (Line 283) ClassicTriggerStarter2();
        ClassicTriggerStarter2()
        # (Line 284) ClassicTriggerStarter3();
        ClassicTriggerStarter3()
        # (Line 285) ClassicTriggerStarter4();
        ClassicTriggerStarter4()
        # (Line 286) ClassicTriggerStarter5();
        ClassicTriggerStarter5()
        # (Line 287) }
        # (Line 288) if (playerexist(P4)) {
    EUDEndIf()
    if EUDIf()(f_playerexist(P4)):
        # (Line 289) setcurpl(P4);
        f_setcurpl(P4)
        # (Line 290) ClassicTriggerStarter0();
        ClassicTriggerStarter0()
        # (Line 291) ClassicTriggerStarter2();
        ClassicTriggerStarter2()
        # (Line 292) ClassicTriggerStarter3();
        ClassicTriggerStarter3()
        # (Line 293) ClassicTriggerStarter4();
        ClassicTriggerStarter4()
        # (Line 294) ClassicTriggerStarter5();
        ClassicTriggerStarter5()
        # (Line 295) }
        # (Line 296) if (playerexist(P5)) {
    EUDEndIf()
    if EUDIf()(f_playerexist(P5)):
        # (Line 297) setcurpl(P5);
        f_setcurpl(P5)
        # (Line 298) ClassicTriggerStarter0();
        ClassicTriggerStarter0()
        # (Line 299) ClassicTriggerStarter2();
        ClassicTriggerStarter2()
        # (Line 300) ClassicTriggerStarter3();
        ClassicTriggerStarter3()
        # (Line 301) ClassicTriggerStarter4();
        ClassicTriggerStarter4()
        # (Line 302) ClassicTriggerStarter5();
        ClassicTriggerStarter5()
        # (Line 303) }
        # (Line 304) if (playerexist(P6)) {
    EUDEndIf()
    if EUDIf()(f_playerexist(P6)):
        # (Line 305) setcurpl(P6);
        f_setcurpl(P6)
        # (Line 306) ClassicTriggerStarter0();
        ClassicTriggerStarter0()
        # (Line 307) }
        # (Line 308) if (playerexist(P7)) {
    EUDEndIf()
    if EUDIf()(f_playerexist(P7)):
        # (Line 309) setcurpl(P7);
        f_setcurpl(P7)
        # (Line 310) ClassicTriggerStarter0();
        ClassicTriggerStarter0()
        # (Line 311) }
        # (Line 312) if (playerexist(P8)) {
    EUDEndIf()
    if EUDIf()(f_playerexist(P8)):
        # (Line 313) setcurpl(P8);
        f_setcurpl(P8)
        # (Line 314) ClassicTriggerStarter0();
        ClassicTriggerStarter0()
        # (Line 315) ClassicTriggerStarter1();
        ClassicTriggerStarter1()
        # (Line 316) }
        # (Line 317) }
    EUDEndIf()
    # (Line 318) function WaitableTriggerExec() {

@EUDFunc
def WaitableTriggerExec():
    # (Line 319) }
    # (Line 320) function onPluginStart() {
    pass

@EUDFunc
def onPluginStart():
    # (Line 321) randomize();
    f_randomize()
    # (Line 323) }
    # (Line 324) function beforeTriggerExec() {

@EUDFunc
def beforeTriggerExec():
    # (Line 325) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 326) WaitableTriggerExec();
    WaitableTriggerExec()
    # (Line 327) ClassicTriggerExec();
    ClassicTriggerExec()
    # (Line 328) EUDEndPlayerLoop();
    EUDEndPlayerLoop()
    # (Line 329) ClassicTriggerStarter();
    ClassicTriggerStarter()
    # (Line 330) BGM.Player();
    BGM.Player()
    # (Line 331) foreach(ptr, epd : EUDLoopPlayerUnit(0) ) {
    for ptr, epd in EUDLoopPlayerUnit(0):
        # (Line 332) if (
        _t1 = EUDIf()
        # (Line 333) wread(ptr + 0x064) == 164
        # (Line 334) ) {
        if _t1(f_wread(ptr + 0x064) == 164):
            # (Line 335) }
            # (Line 336) }
            pass
        EUDEndIf()
        # (Line 337) }

    # (Line 338) function afterTriggerExec() {

@EUDFunc
def afterTriggerExec():
    # (Line 339) }
    pass
