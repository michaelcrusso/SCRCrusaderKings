## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *
from eudplib.core.eudfunc import EUDTraceLog, EUDTracedFunc, EUDTracedTypedFunc, EUDTracedMethod, EUDTracedTypedMethod
from eudplib.epscript.helper import _RELIMP, _TYGV, _TYSV, _TYLV, _CGFW, _ARR, _VARR, _SRET, _SV, _ATTW, _ARRW, _ATTC, _ARRC, _L2V, _LSH, _ALL
# (Line 1) import tempcustomText as tct;
import tempcustomText as tct
# (Line 3) const musicLastTime = PVariable();
musicLastTime = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 4) const musicFrame = EUDArray(8);
musicFrame = _CGFW(lambda: [EUDArray(8)], 1)[0]
# (Line 5) const musicnum = EUDArray(8);
musicnum = _CGFW(lambda: [EUDArray(8)], 1)[0]
# (Line 6) const musicflag = EUDArray(8);
musicflag = _CGFW(lambda: [EUDArray(8)], 1)[0]
# (Line 7) const musicisplay = EUDArray(8);
musicisplay = _CGFW(lambda: [EUDArray(8)], 1)[0]
# (Line 9) function Player() {
@EUDFunc
def Player():
    # (Line 10) var currentid = getcurpl();
    currentid = _TYLV([None], [f_getcurpl()])
    # (Line 11) for (var i = 0 ; i < 8 ; i++) {
    i = _TYLV([None], [0])
    if EUDWhile()(i >= 8, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 12) if (musicisplay[i] == 1 && musicflag[i] != 2) {
        if EUDIf()(EUDSCAnd()(_ARRC(musicisplay, i) == 1)(_ARRC(musicflag, i) == 2, neg=True)()):
            # (Line 13) var playtime = musicLastTime[i] - dwread_epd(EPD(0x51CE8C));
            playtime = _TYLV([None], [musicLastTime[i] - f_dwread_epd(EPD(0x51CE8C))])
            # (Line 14) var LastFrame;
            LastFrame = EUDVariable()
            # (Line 15) const music_No = musicnum[i];
            music_No = musicnum[i]
            # (Line 16) if (musicFrame[i] < LastFrame) {
            if EUDIf()(_ARRC(musicFrame, i) >= LastFrame, neg=True):
                # (Line 17) if (playtime > 5180) {
                if EUDIf()(playtime <= 5180, neg=True):
                    # (Line 18) tct.makeText('M');
                    tct.f_makeText('M')
                    # (Line 21) const music_name = musicnum[i];
                    music_name = musicnum[i]
                    # (Line 22) tct.addText(music_name);
                    tct.f_addText(music_name)
                    # (Line 24) tct.addText('_');
                    tct.f_addText('_')
                    # (Line 27) const music_frame = musicFrame[i];
                    music_frame = musicFrame[i]
                    # (Line 28) tct.addText(music_frame);
                    tct.f_addText(music_frame)
                    # (Line 32) tct.addText('.ogg');
                    tct.f_addText('.ogg')
                    # (Line 33) SetCurrentPlayer(i);
                    # (Line 35) musicFrame[i] = musicFrame[i] + 1;
                    DoActions(SetCurrentPlayer(i))
                    _ARRW(musicFrame, i) << (musicFrame[i] + 1)
                    # (Line 36) musicLastTime[i] = dwread_epd(EPD(0x51CE8C));
                    _ARRW(musicLastTime, i) << (f_dwread_epd(EPD(0x51CE8C)))
                    # (Line 37) }
                    # (Line 39) } else {
                EUDEndIf()
            if EUDElse()():
                # (Line 41) if (musicflag[i] == 1) {
                if EUDIf()(_ARRC(musicflag, i) == 1):
                    # (Line 43) musicFrame[i] = 0;
                    _ARRW(musicFrame, i) << (0)
                    # (Line 44) musicLastTime[i] = dwread_epd(EPD(0x51CE8C));
                    _ARRW(musicLastTime, i) << (f_dwread_epd(EPD(0x51CE8C)))
                    # (Line 45) } else if (musicflag[i] == 0) {
                if EUDElseIf()(_ARRC(musicflag, i) == 0):
                    # (Line 46) musicflag[i] = 2;
                    _ARRW(musicflag, i) << (2)
                    # (Line 47) }
                    # (Line 48) }
                EUDEndIf()
                # (Line 49) }
            EUDEndIf()
            # (Line 50) }
        EUDEndIf()
        # (Line 51) SetCurrentPlayer(currentid);
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 52) }
    DoActions(SetCurrentPlayer(currentid))
    # (Line 54) function parsePlayer(tplayer: TrgPlayer) {

@EUDTypedFunc([TrgPlayer])
def f_parsePlayer(tplayer):
    # (Line 55) if (tplayer < 8) {
    if EUDIf()(tplayer >= 8, neg=True):
        # (Line 56) return tplayer;
        EUDReturn(tplayer)
        # (Line 57) }
        # (Line 58) return getcurpl();
    EUDEndIf()
    EUDReturn(f_getcurpl())
    # (Line 59) }
    # (Line 61) function Play(tplayer: TrgPlayer, BGMNum, flag) {

@EUDTypedFunc([TrgPlayer, None, None])
def Play(tplayer, BGMNum, flag):
    # (Line 62) const p = parsePlayer(tplayer);
    p = f_parsePlayer(tplayer)
    # (Line 63) if (flag == 0 && musicflag[p] == 0) {
    if EUDIf()(EUDSCAnd()(flag == 0)(_ARRC(musicflag, p) == 0)()):
        # (Line 64) if (musicnum[p] != BGMNum) {
        if EUDIf()(_ARRC(musicnum, p) == BGMNum, neg=True):
            # (Line 65) musicLastTime[p] = dwread_epd(EPD(0x51CE8C)) + 5250 ;
            _ARRW(musicLastTime, p) << (f_dwread_epd(EPD(0x51CE8C)) + 5250)
            # (Line 66) musicFrame[p] = 0;
            _ARRW(musicFrame, p) << (0)
            # (Line 67) }
            # (Line 68) musicnum[p] = BGMNum;
        EUDEndIf()
        _ARRW(musicnum, p) << (BGMNum)
        # (Line 69) musicflag[p] = flag;
        _ARRW(musicflag, p) << (flag)
        # (Line 70) musicisplay[p] = 1;
        _ARRW(musicisplay, p) << (1)
        # (Line 71) } else {
    if EUDElse()():
        # (Line 72) musicLastTime[p] = dwread_epd(EPD(0x51CE8C)) + 5250;
        _ARRW(musicLastTime, p) << (f_dwread_epd(EPD(0x51CE8C)) + 5250)
        # (Line 73) musicFrame[p] = 0;
        _ARRW(musicFrame, p) << (0)
        # (Line 74) musicnum[p] = BGMNum;
        _ARRW(musicnum, p) << (BGMNum)
        # (Line 75) musicflag[p] = flag;
        _ARRW(musicflag, p) << (flag)
        # (Line 76) musicisplay[p] = 1;
        _ARRW(musicisplay, p) << (1)
        # (Line 77) }
        # (Line 78) }
    EUDEndIf()
    # (Line 80) function Stop(tplayer: TrgPlayer) {

@EUDTypedFunc([TrgPlayer])
def Stop(tplayer):
    # (Line 81) const p = parsePlayer(tplayer);
    p = f_parsePlayer(tplayer)
    # (Line 82) musicisplay[p] = 0;
    _ARRW(musicisplay, p) << (0)
    # (Line 83) }
    # (Line 85) function Resume(tplayer: TrgPlayer) {

@EUDTypedFunc([TrgPlayer])
def Resume(tplayer):
    # (Line 86) const p = parsePlayer(tplayer);
    p = f_parsePlayer(tplayer)
    # (Line 87) musicisplay[p] = 1;
    _ARRW(musicisplay, p) << (1)
    # (Line 88) }
    # (Line 90) function CurrentPlayMusic(tplayer: TrgPlayer) {

@EUDTypedFunc([TrgPlayer])
def CurrentPlayMusic(tplayer):
    # (Line 91) const p = parsePlayer(tplayer);
    p = f_parsePlayer(tplayer)
    # (Line 92) return musicnum[p];
    EUDReturn(musicnum[p])
    # (Line 93) }
    # (Line 95) function isplaying(tplayer: TrgPlayer) {

@EUDTypedFunc([TrgPlayer])
def f_isplaying(tplayer):
    # (Line 96) const p = parsePlayer(tplayer);
    p = f_parsePlayer(tplayer)
    # (Line 97) return musicflag[p];
    EUDReturn(musicflag[p])
    # (Line 98) }
